interface AmmMints {
    baseMint: string;
    quoteMint: string;
}
export declare function decodeAmmMints(data: Buffer | string): AmmMints | null;
interface AmmAccount {
    version: number;
    status: number;
    nonce: number;
    maxOrder: number;
    depth: number;
    baseDecimal: number;
    quoteDecimal: number;
    state: number;
    resetFlag: number;
    minSize: string;
    volMaxCutRatio: number;
    amountWaveRatio: number;
    baseLotSize: string;
    quoteLotSize: string;
    minSeparateNumerator: number;
    minSeparateDenominator: number;
    tradeFeeNumerator: number;
    tradeFeeDenominator: number;
    swapFeeNumerator: number;
    swapFeeDenominator: number;
    pnlNumerator: number;
    pnlDenominator: number;
    baseNeedTakePnl: string;
    quoteNeedTakePnl: string;
    quoteTotalPnl: string;
    baseTotalPnl: string;
    systemDecimalValue: string;
    minPriceMultiplier: number;
    maxPriceMultiplier: number;
    swapBaseInAmount: string;
    swapQuoteOutAmount: string;
    swapBase2QuoteFee: string;
    swapQuoteInAmount: string;
    swapBaseOutAmount: string;
    swapQuote2BaseFee: string;
    poolOpenTime: string;
    punishPcAmount: string;
    punishCoinAmount: string;
    orderbookToInitTime: string;
    lpReserve: string;
    baseVault: string;
    quoteVault: string;
    baseMint: string;
    quoteMint: string;
    lpMint: string;
    openOrders: string;
    marketId: string;
    marketProgramId: string;
    targetOrders: string;
    serumBids: string;
    serumAsks: string;
    serumEventQueue: string;
    serumCoinVault: string;
    serumPcVault: string;
    serumVaultSigner: string;
}
export declare function decodeAmmAccount(data: Buffer | string): AmmAccount | null;
export declare function isAmmAccountData(data: Buffer): boolean;
export {};
